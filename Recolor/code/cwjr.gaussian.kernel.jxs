<jittershader name="Gaussian Kernel">
    <description>
    Creates a Gaussian kernel from the texture
    </description>
    <param name="weight" type="float" default="1.0" >
        <description>
            The depth of the blurring effect
        </description>
    </param>
    
    <param name="tex0" type="int" default="0">
        <description>
            The input texture
        </description>
    </param>

    <language name="glsl" version="1.2">
        <bind param="weight" program="fp" />

        <program name="vp" type="vertex">
<![CDATA[

        #version 120

        //coordinate of current pixel in texture
        varying vec2 texcoord0;
        //dimensions of the texture
        varying vec2 texdim0;

        //just pass the coordinates and dimensions of the texture
        void main(void) {
            gl_Position = ftransform();
            texcoord0 = vec2(gl_TextureMatrix[0] * gl_MultiTexCoord0);
            texdim0 = vec2(abs(gl_TextureMatrix[0][0][0]), abs(gl_TextureMatrix[0][1][1]));            
        }

]]>
        </program>

        <program name="fp" type="fragment">
<![CDATA[

        #version 120

        //for some reason pi is not a built-in constant
        #define PI 3.1415926538

        //passed from the vp
        varying vec2 texcoord0;
        varying vec2 texdim0;

        //param set from external code 
        uniform float weight;

        //function to get the weight for each member of the kernel
        float getWeight(vec2 offset) {

            float leftSide = (1 / (2 * PI * pow(weight, 2))) * exp(1);
            float rightSide = (pow(offset.x, 2) + pow(offset.y, 2)) / (2 * pow(weight, 2));

            return leftSide - rightSide;
        }


        void main(void) {

            float sum = 0.0;

            for(float i = 0.0; i < texdim0.x; i+= 1) {
                for(float j = 0.0; j < texdim0.y; j+= 1) {
                    vec2 offset = vec2(i - floor(texdim0.x / 2.0), j - floor(texdim0.y / 2));

                    sum += getWeight(offset);
                }
            }

            float kernCorrect = 1.0 / sum;

            vec2 myOffset = vec2(floor(texcoord0.x) - floor(texdim0.x / 2.0), floor(texcoord0.y) - floor(texdim0.y / 2.0));

            float myWeight = getWeight(myOffset) * kernCorrect;

            gl_FragColor = vec4(myWeight,myWeight,myWeight,myWeight);
        }
]]>
        </program>
    </language>
</jittershader>
