<jittershader name="gaussian smoothing">
    <description>
    Gaussian Smoothing kernel implementation (5x5)
    </description>

    <param name="weight" type="float" default="1.0" >
        <description>
            The weight of the blur to be used
        </description>
    </param>
    <param name="tex0" type="int" default="0" />

    <language name="glsl" version="1.2">
        <bind param="weight" program="fp" />
        <bind param="weight" program="vp" />
        <bind param="tex0" program="fp" />
        <program name="vp" type="vertex">
<![CDATA[

    #version 120

    #define PI 3.1415926538

    uniform float weight;

    varying vec2 texcoord0;
    varying vec2 texdim0;

    varying vec3 kern0;
    varying vec3 kern1;
    varying vec3 kern2;

    varying float kernCorrect;

    //function to get the weight for each member of the kernel
    float getWeight(vec2 offset) {

        float leftSide = (1 / (2 * PI * pow(weight, 2))) * exp(1);
        float rightSide = (pow(offset.x, 2) + pow(offset.y, 2)) / (2 * pow(weight, 2));

        return leftSide - rightSide;
    }

    void main(void) {
        gl_Position = ftransform();
        texcoord0 = vec2(gl_TextureMatrix[0] * gl_MultiTexCoord0);
        texdim0 = vec2(abs(gl_TextureMatrix[0][0][0]), abs(gl_TextureMatrix[0][1][1]));

        float sum = 0.0;

        for(int i = -1; i < 2; i++) {
            for(int j = -1; j < 2; j++) {
                vec2 offset = vec2(i,j);
                float origWeight = getWeight(offset);
                sum = sum + origWeight;
                }
            }

            kernCorrect = 1.0 / sum;
        }
]]>
        </program>
        <program name="fp" type="fragment">
<![CDATA[

    #version 120

    #define PI 3.1415926538

    varying vec2 texcoord0;
    varying vec2 texdim0;

    uniform float weight;

    uniform sampler2DRect tex0;

    varying float kernCorrect;

    //function to get the weight for each member of the kernel
    float getWeight(vec2 offset) {

        float leftSide = (1 / (2 * PI * pow(weight, 2))) * exp(1);
        float rightSide = (pow(offset.x, 2) + pow(offset.y, 2)) / (2 * pow(weight, 2));

        return leftSide - rightSide;
    }

    void main(void) {

        vec3 sum = vec3(0.0,0.0,0.0);

         for(int i = -1; i < 2; i++) {
            for(int j = -1; j < 2; j++) {    //-1 -1
                vec2 offset = vec2(-1,-1);
                float kWeight = getWeight(offset) * kernCorrect;
                vec4 kernWeight = vec4(kWeight, kWeight, kWeight, kWeight);
                vec4 sample = texture2DRect(tex0, vec2(texcoord0 + offset));
                sample = sample * kernWeight;
                sum = sum +vec3(sample.rgb);
            }
         }
                
        gl_FragColor = vec4(sum, 1.0);

    }
]]>
        </program>
    </language>
</jittershader>