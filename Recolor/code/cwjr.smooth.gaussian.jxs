<jittershader name="gaussian smoothing">
    <description>
    Gaussian Smoothing kernel implementation (5x5)
    </description>

    <param name="weight" type="float" default="1.0" >
        <description>
            The weight of the blur to be used
        </description>
    </param>
    <param name="tex0" type="int" default="0" />

    <language name="glsl" version="1.2">
        <bind param="weight" program="fp" />
        <bind param="tex0" program="fp" />
        <program name="vp" type="vertex">
<![CDATA[

        #version 120

    varying vec2 texcoord0;
    varying vec2 texdim0;

    void main(void) {
        gl_Position = ftransform();
        texcoord0 = vec2(gl_TextureMatrix[0] * gl_MultiTexCoord0);
        texdim0 = vec2(abs(gl_TextureMatrix[0][0][0]), abs(gl_TextureMatrix[0][1][1]));
    }
]]>
        </program>
        <program name="fp" type="fragment">
<![CDATA[

    #version 120

    #define PI 3.1415926538

    #define kernCorrect -0.4747553586

    varying vec2 texcoord0;
    varying vec2 texdim0;

    uniform float weight;

    uniform sampler2DRect tex0;

    //function to get the weight for each member of the kernel
    float getWeight(vec2 offset) {

        float leftSide = (1 / (2 * PI * pow(weight, 2))) * exp(1);
        float rightSide = (pow(offset.x, 2) + pow(offset.y, 2)) / (2 * pow(weight, 2));

        return leftSide - rightSide;
    }

    void main(void) {

        //vec3 sum = vec3(0.0,0.0,0.0);

                //-1 -1
                vec2 offset = vec2(-1,-1);
                float kWeight = getWeight(offset) * kernCorrect;
                vec4 kernWeight = vec4(kWeight, kWeight, kWeight, kWeight);
                vec4 sample = texture2DRect(tex0, vec2(texcoord0 + offset));
                sample = sample * kernWeight;
                vec3 sum = vec3(sample.rgb);
                //-1 0
                offset = vec2(-1,0);
                kWeight = getWeight(offset) * kernCorrect;
                kernWeight = vec4(kWeight, kWeight, kWeight, kWeight);
                sample = texture2DRect(tex0, vec2(texcoord0 + offset));
                sample = sample * kernWeight;
                sum = vec3(sum + sample.rgb);
                //-1 1
                offset = vec2(-1,1);
                kWeight = getWeight(offset) * kernCorrect;
                kernWeight = vec4(kWeight, kWeight, kWeight, kWeight);
                sample = texture2DRect(tex0, vec2(texcoord0 + offset));
                sample = sample * kernWeight;
                sum = vec3(sum + sample.rgb);
                //0 -1
                offset = vec2(0,-1);
                kWeight = getWeight(offset) * kernCorrect;
                kernWeight = vec4(kWeight, kWeight, kWeight, kWeight);
                sample = texture2DRect(tex0, vec2(texcoord0 + offset));
                sample = sample * kernWeight;
                sum = vec3(sum + sample.rgb);
                //0 0
                offset = vec2(0,0);
                kWeight = getWeight(offset) * kernCorrect;
                kernWeight = vec4(kWeight, kWeight, kWeight, kWeight);
                sample = texture2DRect(tex0, vec2(texcoord0 + offset));
                sample = sample * kernWeight;
                sum = vec3(sum + sample.rgb);
                //0 1
                offset = vec2(0,1);
                kWeight = getWeight(offset) * kernCorrect;
                kernWeight = vec4(kWeight, kWeight, kWeight, kWeight);
                sample = texture2DRect(tex0, vec2(texcoord0 + offset));
                sample = sample * kernWeight;
                sum = vec3(sum + sample.rgb);
                //1 -1
                offset = vec2(1,-1);
                kWeight = getWeight(offset) * kernCorrect;
                kernWeight = vec4(kWeight, kWeight, kWeight, kWeight);
                sample = texture2DRect(tex0, vec2(texcoord0 + offset));
                sample = sample * kernWeight;
                sum = vec3(sum + sample.rgb);
                //1 0
                offset = vec2(1,0);
                kWeight = getWeight(offset) * kernCorrect;
                kernWeight = vec4(kWeight, kWeight, kWeight, kWeight);
                sample = texture2DRect(tex0, vec2(texcoord0 + offset));
                sample = sample * kernWeight;
                sum = vec3(sum + sample.rgb);
                //1 1
                offset = vec2(1,1);
                kWeight = getWeight(offset) * kernCorrect;
                kernWeight = vec4(kWeight, kWeight, kWeight, kWeight);
                sample = texture2DRect(tex0, vec2(texcoord0 + offset));
                sample = sample * kernWeight;
                sum = vec3(sum + sample.rgb);

        gl_FragColor = vec4(sum, 1.0);

    }
]]>
        </program>
    </language>
</jittershader>