<jittershader name="gaussian smoothing">
    <description>
    Gaussian Smoothing kernel implementation (5x5)
    </description>

    <param name="tex0" type="int" default="0" />
    <param name="tex1" type="int" default="1">
        <description>
            The texture containing the kernel
        </description>
    </param>


    <language name="glsl" version="1.2">
        <bind param="tex0" program="fp" />
        <bind param="tex1" program="fp" />
        <program name="vp" type="vertex">
<![CDATA[

    #version 120

    //the corrdinate and size of the texture to be blurred
    varying vec2 texcoord0;
    varying vec2 texdim0;

    //size of the texture containing the lookup table for the kernel
    varying vec2 texdim1;

    void main(void) {
        gl_Position = ftransform();
        texcoord0 = vec2(gl_TextureMatrix[0] * gl_MultiTexCoord0);
        texdim0 = vec2(abs(gl_TextureMatrix[0][0][0]), abs(gl_TextureMatrix[0][1][1]));
        texdim1 = vec2(abs(gl_TextureMatrix[1][0][0]), abs(gl_TextureMatrix[1][1][1]));
        }
]]>
        </program>
        <program name="fp" type="fragment">
<![CDATA[

    #version 120

    varying vec2 texcoord0;
    varying vec2 texdim0;
    varying vec2 texdim1;

    uniform sampler2DRect tex0;
    uniform sampler2DRect tex1;


    void main(void) {

        float xRadius = floor(texdim1.x / 2.0);
        float yRadius = floor(texdim1.y / 2.0);

        vec4 sum = vec4(0.0,0.0,0.0,0.0);

        for(float i = -1.0 * xRadius ; i <= xRadius; i+= 1) {
            for(float j = -1.0 * yRadius; j <= yRadius; j+= 1 ) {
                vec2 tex0Pos = vec2(floor(texcoord0.x + i), floor(texcoord0.y + j));

                vec4 sample = texture2DRect(tex0, tex0Pos);

                vec4 kernWeight = texture2DRect(tex1, vec2(floor((i + xRadius) * texdim1.x), floor((j + yRadius) * texdim1.y)));

                sum += sample * kernWeight;
            }
        }

        gl_FragColor = vec4(sum.xyz, 1.0);
    }
]]>
        </program>
    </language>
</jittershader>